AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Plantilla de CloudFormation para crear una VPC con subredes públicas y privadas.
  Esta configuración incluye:
  - 1 VPC
  - 2 Subredes Públicas
  - 2 Subredes Privadas para la capa de aplicación (App) con tabla de enrutamiento propia.
  - 2 Subredes Privadas para la capa de base de datos (DB) con tabla de enrutamiento propia y aislada.
  - 1 Internet Gateway (IGW)
  - 1 Instancia EC2 configurada como NAT
  - Tablas de enrutamiento para subredes públicas y privadas.

Parameters:
  Environment:
    Description: El ambiente para el despliegue (ej. dev, test, prod)
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
      - staging

  ResourceName:
    Description: Nombre base para los recursos (ej. my-app)
    Type: String
    Default: my-vpc-project

  ProjectTag:
    Description: El valor para el tag 'Project'
    Type: String
    Default: "Demo-Project"

  OwnerTag:
    Description: El valor para el tag 'Owner'
    Type: String
    Default: "DevOps-Team"

  # NatInstanceType:
  #   Description: Tipo de instancia para la NAT Instance
  #   Type: String
  #   Default: t3.micro
  #   AllowedValues:
  #     - t3.nano
  #     - t3.micro
  #     - t3.small
  #     - t2.nano
  #     - t2.micro
  #     - t2.small

  VPCCIDR:
    Description: Bloque CIDR para la VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Bloque CIDR para la primera subred pública
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2CIDR:
    Description: Bloque CIDR para la segunda subred pública
    Type: String
    Default: 10.0.2.0/24

  PrivateAppSubnet1CIDR:
    Description: Bloque CIDR para la primera subred privada de la aplicación
    Type: String
    Default: 10.0.10.0/24

  PrivateAppSubnet2CIDR:
    Description: Bloque CIDR para la segunda subred privada de la aplicación
    Type: String
    Default: 10.0.11.0/24

  PrivateDBSubnet1CIDR:
    Description: Bloque CIDR para la primera subred privada de la base de datos
    Type: String
    Default: 10.0.20.0/24

  PrivateDBSubnet2CIDR:
    Description: Bloque CIDR para la segunda subred privada de la base de datos
    Type: String
    Default: 10.0.21.0/24

Mappings:
  AWSRegionToNatAMI:
    us-east-1:
      AMI: ami-07860a2d7eb515d9a

Resources:
  # --- VPC ---
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${ResourceName}-${Environment}-VPC'
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Owner
          Value: !Ref OwnerTag

  # --- Internet Gateway ---
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ResourceName}-${Environment}-IGW'
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Owner
          Value: !Ref OwnerTag

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # --- Subredes Públicas ---
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ResourceName}-${Environment}-Public-Subnet-1'
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Owner
          Value: !Ref OwnerTag

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ResourceName}-${Environment}-Public-Subnet-2'
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Owner
          Value: !Ref OwnerTag

  # --- Subredes Privadas para Aplicación ---
  PrivateAppSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateAppSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceName}-${Environment}-Private-App-Subnet-1'
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Owner
          Value: !Ref OwnerTag

  PrivateAppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateAppSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceName}-${Environment}-Private-App-Subnet-2'
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Owner
          Value: !Ref OwnerTag
          
  # --- Subredes Privadas para Base de Datos ---
  PrivateDBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateDBSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceName}-${Environment}-Private-DB-Subnet-1'
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Owner
          Value: !Ref OwnerTag

  PrivateDBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateDBSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub '${ResourceName}-${Environment}-Private-DB-Subnet-2'
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Owner
          Value: !Ref OwnerTag
  
  # --- NAT Gateway y EIP ---
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ResourceName}-${Environment}-EIP'
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Owner
          Value: !Ref OwnerTag

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${ResourceName}-${Environment}-NAT-Gateway'
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Owner
          Value: !Ref OwnerTag

  # --- NAT Instance ---
  # NatInstanceSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupName: !Sub "${ResourceName}-${Environment}-Nat-SG"
  #     GroupDescription: "Enable inbound access from private app subnets for NAT"
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: -1
  #         FromPort: -1
  #         ToPort: -1
  #         CidrIp: !Ref PrivateAppSubnet1CIDR
  #       - IpProtocol: -1
  #         FromPort: -1
  #         ToPort: -1
  #         CidrIp: !Ref PrivateAppSubnet2CIDR
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${ResourceName}-${Environment}-Nat-SG'
  #       - Key: Project
  #         Value: !Ref ProjectTag
  #       - Key: Owner
  #         Value: !Ref OwnerTag
          
  # NatInstance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     InstanceType: !Ref NatInstanceType
  #     ImageId: !FindInMap [AWSRegionToNatAMI, !Ref "AWS::Region", AMI]
  #     SubnetId: !Ref PublicSubnet1
  #     SecurityGroupIds:
  #       - !Ref NatInstanceSecurityGroup
  #     SourceDestCheck: false
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${ResourceName}-${Environment}-NAT-Instance'
  #       - Key: Project
  #         Value: !Ref ProjectTag
  #       - Key: Owner
  #         Value: !Ref OwnerTag
  #     UserData: !Base64 |
  #       #!/bin/bash
  #       # 1. Habilitar el reenvío de IP
  #       echo "net.ipv4.ip_forward = 1" | sudo tee /etc/sysctl.d/custom-ip-forwarding.conf
  #       sudo sysctl -p /etc/sysctl.d/custom-ip-forwarding.conf
        
  #       # 2. Instalar y habilitar iptables
  #       sudo yum install iptables-services -y
  #       sudo systemctl enable iptables
  #       sudo systemctl start iptables
        
  #       # 3. Encontrar la interfaz de red principal
  #       PRIMARY_INTERFACE=$(ip route get 1.1.1.1 | awk -F' ' '{print $5}')
        
  #       # 4. Aplicar regla de enmascaramiento (MASQUERADE)
  #       sudo /sbin/iptables -t nat -A POSTROUTING -o $PRIMARY_INTERFACE -j MASQUERADE
        
  #       # 5. Guardar reglas para persistencia
  #       sudo /sbin/iptables-save | sudo tee /etc/sysconfig/iptables
        
  #       # 6. Reiniciar servicio
  #       sudo systemctl restart iptables
  
  # NatElasticIP:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: vpc
  #     InstanceId: !Ref NatInstance
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${ResourceName}-${Environment}-NAT-EIP'
  #       - Key: Project
  #         Value: !Ref ProjectTag
  #       - Key: Owner
  #         Value: !Ref OwnerTag

  # --- Tablas de Enrutamiento ---
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ResourceName}-${Environment}-Public-Route-Table'
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Owner
          Value: !Ref OwnerTag

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateAppRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ResourceName}-${Environment}-Private-App-Route-Table'
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Owner
          Value: !Ref OwnerTag

  PrivateAppRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateAppRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # InstanceId: !Ref NatInstance
      NatGatewayId: !Ref NatGateway

  PrivateDBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ResourceName}-${Environment}-Private-DB-Route-Table'
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Owner
          Value: !Ref OwnerTag

  # --- Asociaciones de Tablas de Enrutamiento ---
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateAppSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateAppSubnet1
      RouteTableId: !Ref PrivateAppRouteTable

  PrivateAppSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateAppSubnet2
      RouteTableId: !Ref PrivateAppRouteTable
      
  PrivateDBSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateDBSubnet1
      RouteTableId: !Ref PrivateDBRouteTable

  PrivateDBSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateDBSubnet2
      RouteTableId: !Ref PrivateDBRouteTable

Outputs:
  VPCId:
    Description: ID de la VPC creada
    Value: !Ref VPC
    Export:
      Name: !Sub "${ResourceName}-${Environment}-VPCID"

  PublicSubnetIds:
    Description: IDs de las subredes públicas
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ] ]
    Export:
      Name: !Sub "${ResourceName}-${Environment}-PublicSubnets"

  PrivateAppSubnetIds:
    Description: IDs de las subredes privadas de aplicación
    Value: !Join [ ",", [ !Ref PrivateAppSubnet1, !Ref PrivateAppSubnet2 ] ]
    Export:
      Name: !Sub "${ResourceName}-${Environment}-PrivateAppSubnets"

  PrivateDBSubnetIds:
    Description: IDs de las subredes privadas de base de datos
    Value: !Join [ ",", [ !Ref PrivateDBSubnet1, !Ref PrivateDBSubnet2 ] ]
    Export:
      Name: !Sub "${ResourceName}-${Environment}-PrivateDBSubnets"
      
  # NatInstanceId:
  #   Description: ID de la instancia NAT
  #   Value: !Ref NatInstance
  #   Export:
  #     Name: !Sub "${ResourceName}-${Environment}-NatInstanceId"

  PublicSubnet1Id:
    Description: ID de la primera subred publica
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${ResourceName}-${Environment}-PublicSubnet1Id"

  PublicSubnet2Id:
    Description: ID de la segunda subred publica
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${ResourceName}-${Environment}-PublicSubnet2Id"

  PrivateAppSubnet1Id:
    Description: ID de la primera subred privada de la aplicacion
    Value: !Ref PrivateAppSubnet1
    Export:
      Name: !Sub "${ResourceName}-${Environment}-PrivateAppSubnet1Id"

  PrivateAppSubnet2Id:
    Description: ID de la segunda subred privada de la aplicacion
    Value: !Ref PrivateAppSubnet2
    Export:
      Name: !Sub "${ResourceName}-${Environment}-PrivateAppSubnet2Id"

  PrivateDBSubnet1Id:
    Description: ID de la primera subred privada de la base de datos
    Value: !Ref PrivateDBSubnet1
    Export:
      Name: !Sub "${ResourceName}-${Environment}-PrivateDBSubnet1Id"

  PrivateDBSubnet2Id:
    Description: ID de la segunda subred privada de la base de datos
    Value: !Ref PrivateDBSubnet2
    Export:
      Name: !Sub "${ResourceName}-${Environment}-PrivateDBSubnet2Id"
